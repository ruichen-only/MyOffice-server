<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rea.myoffice.mapper.LoginlogMapper">
  <resultMap id="BaseResultMap" type="com.rea.myoffice.model.Loginlog">
    <id column="LoginId" jdbcType="INTEGER" property="loginid" />
    <result column="UserId" jdbcType="VARCHAR" property="userid" />
    <result column="LoginTime" jdbcType="TIMESTAMP" property="logintime" />
    <result column="IfSuccess" jdbcType="INTEGER" property="ifsuccess" />
    <result column="LoginUserIp" jdbcType="VARCHAR" property="loginuserip" />
    <result column="LoginDesc" jdbcType="VARCHAR" property="logindesc" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    LoginId, UserId, LoginTime, IfSuccess, LoginUserIp, LoginDesc
  </sql>
  <select id="selectByExample" parameterType="com.rea.myoffice.model.LoginlogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from loginlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from loginlog
    where LoginId = #{loginid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from loginlog
    where LoginId = #{loginid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.rea.myoffice.model.LoginlogExample">
    delete from loginlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rea.myoffice.model.Loginlog">
    insert into loginlog (LoginId, UserId, LoginTime, 
      IfSuccess, LoginUserIp, LoginDesc
      )
    values (#{loginid,jdbcType=INTEGER}, #{userid,jdbcType=VARCHAR}, #{logintime,jdbcType=TIMESTAMP}, 
      #{ifsuccess,jdbcType=INTEGER}, #{loginuserip,jdbcType=VARCHAR}, #{logindesc,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.rea.myoffice.model.Loginlog">
    insert into loginlog
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginid != null">
        LoginId,
      </if>
      <if test="userid != null">
        UserId,
      </if>
      <if test="logintime != null">
        LoginTime,
      </if>
      <if test="ifsuccess != null">
        IfSuccess,
      </if>
      <if test="loginuserip != null">
        LoginUserIp,
      </if>
      <if test="logindesc != null">
        LoginDesc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginid != null">
        #{loginid,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null">
        #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="ifsuccess != null">
        #{ifsuccess,jdbcType=INTEGER},
      </if>
      <if test="loginuserip != null">
        #{loginuserip,jdbcType=VARCHAR},
      </if>
      <if test="logindesc != null">
        #{logindesc,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.rea.myoffice.model.LoginlogExample" resultType="java.lang.Long">
    select count(*) from loginlog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update loginlog
    <set>
      <if test="record.loginid != null">
        LoginId = #{record.loginid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        UserId = #{record.userid,jdbcType=VARCHAR},
      </if>
      <if test="record.logintime != null">
        LoginTime = #{record.logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ifsuccess != null">
        IfSuccess = #{record.ifsuccess,jdbcType=INTEGER},
      </if>
      <if test="record.loginuserip != null">
        LoginUserIp = #{record.loginuserip,jdbcType=VARCHAR},
      </if>
      <if test="record.logindesc != null">
        LoginDesc = #{record.logindesc,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update loginlog
    set LoginId = #{record.loginid,jdbcType=INTEGER},
      UserId = #{record.userid,jdbcType=VARCHAR},
      LoginTime = #{record.logintime,jdbcType=TIMESTAMP},
      IfSuccess = #{record.ifsuccess,jdbcType=INTEGER},
      LoginUserIp = #{record.loginuserip,jdbcType=VARCHAR},
      LoginDesc = #{record.logindesc,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.rea.myoffice.model.Loginlog">
    update loginlog
    <set>
      <if test="userid != null">
        UserId = #{userid,jdbcType=VARCHAR},
      </if>
      <if test="logintime != null">
        LoginTime = #{logintime,jdbcType=TIMESTAMP},
      </if>
      <if test="ifsuccess != null">
        IfSuccess = #{ifsuccess,jdbcType=INTEGER},
      </if>
      <if test="loginuserip != null">
        LoginUserIp = #{loginuserip,jdbcType=VARCHAR},
      </if>
      <if test="logindesc != null">
        LoginDesc = #{logindesc,jdbcType=VARCHAR},
      </if>
    </set>
    where LoginId = #{loginid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rea.myoffice.model.Loginlog">
    update loginlog
    set UserId = #{userid,jdbcType=VARCHAR},
      LoginTime = #{logintime,jdbcType=TIMESTAMP},
      IfSuccess = #{ifsuccess,jdbcType=INTEGER},
      LoginUserIp = #{loginuserip,jdbcType=VARCHAR},
      LoginDesc = #{logindesc,jdbcType=VARCHAR}
    where LoginId = #{loginid,jdbcType=INTEGER}
  </update>
</mapper>